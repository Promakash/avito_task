// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "avito_shop/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, uid, item
func (_m *Transaction) BuyItem(ctx context.Context, uid int, item domain.Merch) error {
	ret := _m.Called(ctx, uid, item)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.Merch) error); ok {
		r0 = rf(ctx, uid, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCoin provides a mock function with given fields: ctx, tx
func (_m *Transaction) SendCoin(ctx context.Context, tx domain.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SendCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
